/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::core::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const __bool_true_false_are_defined: u32 = 1;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const MB_CUR_MAX: u32 = 1;
pub const SGX_FLAGS_INITTED: u32 = 1;
pub const SGX_FLAGS_DEBUG: u32 = 2;
pub const SGX_FLAGS_MODE64BIT: u32 = 4;
pub const SGX_FLAGS_PROVISION_KEY: u32 = 16;
pub const SGX_FLAGS_EINITTOKEN_KEY: u32 = 32;
pub const SGX_FLAGS_KSS: u32 = 128;
pub const SGX_XFRM_LEGACY: u32 = 3;
pub const SGX_XFRM_AVX: u32 = 6;
pub const SGX_XFRM_AVX512: u32 = 230;
pub const SGX_XFRM_MPX: u32 = 24;
pub const SGX_XFRM_PKRU: u32 = 512;
pub const SGX_XFRM_RESERVED: i32 = -744;
pub const SGX_KEYSELECT_EINITTOKEN: u32 = 0;
pub const SGX_KEYSELECT_PROVISION: u32 = 1;
pub const SGX_KEYSELECT_PROVISION_SEAL: u32 = 2;
pub const SGX_KEYSELECT_REPORT: u32 = 3;
pub const SGX_KEYSELECT_SEAL: u32 = 4;
pub const SGX_KEYPOLICY_MRENCLAVE: u32 = 1;
pub const SGX_KEYPOLICY_MRSIGNER: u32 = 2;
pub const SGX_KEYPOLICY_NOISVPRODID: u32 = 4;
pub const SGX_KEYPOLICY_CONFIGID: u32 = 8;
pub const SGX_KEYPOLICY_ISVFAMILYID: u32 = 16;
pub const SGX_KEYPOLICY_ISVEXTPRODID: u32 = 32;
pub const SGX_KEYID_SIZE: u32 = 32;
pub const SGX_CPUSVN_SIZE: u32 = 16;
pub const SGX_CONFIGID_SIZE: u32 = 64;
pub const SGX_KEY_REQUEST_RESERVED2_BYTES: u32 = 434;
pub const SGX_HASH_SIZE: u32 = 32;
pub const SGX_MAC_SIZE: u32 = 16;
pub const SGX_REPORT_DATA_SIZE: u32 = 64;
pub const SGX_ISVEXT_PROD_ID_SIZE: u32 = 16;
pub const SGX_ISV_FAMILY_ID_SIZE: u32 = 16;
pub const SGX_TARGET_INFO_RESERVED1_BYTES: u32 = 2;
pub const SGX_TARGET_INFO_RESERVED2_BYTES: u32 = 8;
pub const SGX_TARGET_INFO_RESERVED3_BYTES: u32 = 384;
pub const SGX_REPORT_BODY_RESERVED1_BYTES: u32 = 12;
pub const SGX_REPORT_BODY_RESERVED2_BYTES: u32 = 32;
pub const SGX_REPORT_BODY_RESERVED3_BYTES: u32 = 32;
pub const SGX_REPORT_BODY_RESERVED4_BYTES: u32 = 42;
pub const MAX_EX_FEATURES_COUNT: u32 = 32;
pub const SGX_CREATE_ENCLAVE_EX_PCL_BIT_IDX: u32 = 0;
pub const SGX_CREATE_ENCLAVE_EX_PCL: u32 = 1;
pub const SGX_CREATE_ENCLAVE_EX_SWITCHLESS_BIT_IDX: u32 = 1;
pub const SGX_CREATE_ENCLAVE_EX_SWITCHLESS: u32 = 2;
pub const SGX_CREATE_ENCLAVE_EX_KSS_BIT_IDX: u32 = 2;
pub const SGX_CREATE_ENCLAVE_EX_KSS: u32 = 4;
pub const _SGX_LAST_EX_FEATURE_IDX_: u32 = 2;
pub const SGX_DEBUG_FLAG: u32 = 1;
pub const SGX_PLATFORM_INFO_SIZE: u32 = 101;
pub const SGXSD_AES_GCM_IV_SIZE: u32 = 12;
pub const SGXSD_AES_GCM_MAC_SIZE: u32 = 16;
pub const SGXSD_AES_GCM_KEY_SIZE: u32 = 32;
pub const SGXSD_CURVE25519_KEY_SIZE: u32 = 32;
pub const SGXSD_SHA256_HASH_SIZE: u32 = 32;
pub const BR_HASHDESC_ID_OFF: u32 = 0;
pub const BR_HASHDESC_ID_MASK: u32 = 255;
pub const BR_HASHDESC_OUT_OFF: u32 = 8;
pub const BR_HASHDESC_OUT_MASK: u32 = 127;
pub const BR_HASHDESC_STATE_OFF: u32 = 15;
pub const BR_HASHDESC_STATE_MASK: u32 = 255;
pub const BR_HASHDESC_LBLEN_OFF: u32 = 23;
pub const BR_HASHDESC_LBLEN_MASK: u32 = 15;
pub const br_md5_ID: u32 = 1;
pub const br_md5_SIZE: u32 = 16;
pub const br_sha1_ID: u32 = 2;
pub const br_sha1_SIZE: u32 = 20;
pub const br_sha224_ID: u32 = 3;
pub const br_sha224_SIZE: u32 = 28;
pub const br_sha256_ID: u32 = 4;
pub const br_sha256_SIZE: u32 = 32;
pub const br_sha384_ID: u32 = 5;
pub const br_sha384_SIZE: u32 = 48;
pub const br_sha512_ID: u32 = 6;
pub const br_sha512_SIZE: u32 = 64;
pub const br_md5sha1_ID: u32 = 0;
pub const br_md5sha1_SIZE: u32 = 36;
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __int_fast8_t = __int8_t;
pub type __uint_fast8_t = __uint8_t;
pub type __int_fast16_t = libc::c_long;
pub type __uint_fast16_t = libc::c_ulong;
pub type __int_fast32_t = libc::c_long;
pub type __uint_fast32_t = libc::c_ulong;
pub type __int_fast64_t = libc::c_long;
pub type __uint_fast64_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __intptr_t = __int64_t;
pub type __uintptr_t = __uint64_t;
pub type __ptrdiff_t = __int64_t;
pub type __size_t = libc::c_ulong;
pub type __ssize_t = libc::c_long;
pub type __double_t = f64;
pub type __float_t = f32;
pub type __clock_t = libc::c_long;
pub type __time_t = libc::c_long;
pub type __va_list = __builtin_va_list;
pub type __wint_t = libc::c_uint;
pub type __wctype_t = libc::c_ulong;
pub type __wctrans_t = *mut libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __c: libc::c_int,
    pub __v: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wc: __wint_t,
    pub __wcb: [libc::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wcb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wcb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::core::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::core::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t>())).__c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__mbstate_t>())).__v as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__v)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type __intmax_t = __int64_t;
pub type __uintmax_t = __uint64_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = __int_fast8_t;
pub type uint_fast8_t = __uint_fast8_t;
pub type int_fast16_t = __int_fast16_t;
pub type uint_fast16_t = __uint_fast16_t;
pub type int_fast32_t = __int_fast32_t;
pub type uint_fast32_t = __uint_fast32_t;
pub type int_fast64_t = __int_fast64_t;
pub type uint_fast64_t = __uint_fast64_t;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const SGX_SUCCESS: _status_t = 0;
pub const SGX_ERROR_UNEXPECTED: _status_t = 1;
pub const SGX_ERROR_INVALID_PARAMETER: _status_t = 2;
pub const SGX_ERROR_OUT_OF_MEMORY: _status_t = 3;
pub const SGX_ERROR_ENCLAVE_LOST: _status_t = 4;
pub const SGX_ERROR_INVALID_STATE: _status_t = 5;
pub const SGX_ERROR_FEATURE_NOT_SUPPORTED: _status_t = 8;
pub const SGX_PTHREAD_EXIT: _status_t = 9;
pub const SGX_ERROR_MEMORY_MAP_FAILURE: _status_t = 10;
pub const SGX_ERROR_INVALID_FUNCTION: _status_t = 4097;
pub const SGX_ERROR_OUT_OF_TCS: _status_t = 4099;
pub const SGX_ERROR_ENCLAVE_CRASHED: _status_t = 4102;
pub const SGX_ERROR_ECALL_NOT_ALLOWED: _status_t = 4103;
pub const SGX_ERROR_OCALL_NOT_ALLOWED: _status_t = 4104;
pub const SGX_ERROR_STACK_OVERRUN: _status_t = 4105;
pub const SGX_ERROR_UNDEFINED_SYMBOL: _status_t = 8192;
pub const SGX_ERROR_INVALID_ENCLAVE: _status_t = 8193;
pub const SGX_ERROR_INVALID_ENCLAVE_ID: _status_t = 8194;
pub const SGX_ERROR_INVALID_SIGNATURE: _status_t = 8195;
pub const SGX_ERROR_NDEBUG_ENCLAVE: _status_t = 8196;
pub const SGX_ERROR_OUT_OF_EPC: _status_t = 8197;
pub const SGX_ERROR_NO_DEVICE: _status_t = 8198;
pub const SGX_ERROR_MEMORY_MAP_CONFLICT: _status_t = 8199;
pub const SGX_ERROR_INVALID_METADATA: _status_t = 8201;
pub const SGX_ERROR_DEVICE_BUSY: _status_t = 8204;
pub const SGX_ERROR_INVALID_VERSION: _status_t = 8205;
pub const SGX_ERROR_MODE_INCOMPATIBLE: _status_t = 8206;
pub const SGX_ERROR_ENCLAVE_FILE_ACCESS: _status_t = 8207;
pub const SGX_ERROR_INVALID_MISC: _status_t = 8208;
pub const SGX_ERROR_INVALID_LAUNCH_TOKEN: _status_t = 8209;
pub const SGX_ERROR_MAC_MISMATCH: _status_t = 12289;
pub const SGX_ERROR_INVALID_ATTRIBUTE: _status_t = 12290;
pub const SGX_ERROR_INVALID_CPUSVN: _status_t = 12291;
pub const SGX_ERROR_INVALID_ISVSVN: _status_t = 12292;
pub const SGX_ERROR_INVALID_KEYNAME: _status_t = 12293;
pub const SGX_ERROR_SERVICE_UNAVAILABLE: _status_t = 16385;
pub const SGX_ERROR_SERVICE_TIMEOUT: _status_t = 16386;
pub const SGX_ERROR_AE_INVALID_EPIDBLOB: _status_t = 16387;
pub const SGX_ERROR_SERVICE_INVALID_PRIVILEGE: _status_t = 16388;
pub const SGX_ERROR_EPID_MEMBER_REVOKED: _status_t = 16389;
pub const SGX_ERROR_UPDATE_NEEDED: _status_t = 16390;
pub const SGX_ERROR_NETWORK_FAILURE: _status_t = 16391;
pub const SGX_ERROR_AE_SESSION_INVALID: _status_t = 16392;
pub const SGX_ERROR_BUSY: _status_t = 16394;
pub const SGX_ERROR_MC_NOT_FOUND: _status_t = 16396;
pub const SGX_ERROR_MC_NO_ACCESS_RIGHT: _status_t = 16397;
pub const SGX_ERROR_MC_USED_UP: _status_t = 16398;
pub const SGX_ERROR_MC_OVER_QUOTA: _status_t = 16399;
pub const SGX_ERROR_KDF_MISMATCH: _status_t = 16401;
pub const SGX_ERROR_UNRECOGNIZED_PLATFORM: _status_t = 16402;
pub const SGX_ERROR_UNSUPPORTED_CONFIG: _status_t = 16403;
pub const SGX_ERROR_NO_PRIVILEGE: _status_t = 20482;
pub const SGX_ERROR_PCL_ENCRYPTED: _status_t = 24577;
pub const SGX_ERROR_PCL_NOT_ENCRYPTED: _status_t = 24578;
pub const SGX_ERROR_PCL_MAC_MISMATCH: _status_t = 24579;
pub const SGX_ERROR_PCL_SHA_MISMATCH: _status_t = 24580;
pub const SGX_ERROR_PCL_GUID_MISMATCH: _status_t = 24581;
pub const SGX_ERROR_FILE_BAD_STATUS: _status_t = 28673;
pub const SGX_ERROR_FILE_NO_KEY_ID: _status_t = 28674;
pub const SGX_ERROR_FILE_NAME_MISMATCH: _status_t = 28675;
pub const SGX_ERROR_FILE_NOT_SGX_FILE: _status_t = 28676;
pub const SGX_ERROR_FILE_CANT_OPEN_RECOVERY_FILE: _status_t = 28677;
pub const SGX_ERROR_FILE_CANT_WRITE_RECOVERY_FILE: _status_t = 28678;
pub const SGX_ERROR_FILE_RECOVERY_NEEDED: _status_t = 28679;
pub const SGX_ERROR_FILE_FLUSH_FAILED: _status_t = 28680;
pub const SGX_ERROR_FILE_CLOSE_FAILED: _status_t = 28681;
pub const SGX_ERROR_UNSUPPORTED_ATT_KEY_ID: _status_t = 32769;
pub const SGX_ERROR_ATT_KEY_CERTIFICATION_FAILURE: _status_t = 32770;
pub const SGX_ERROR_ATT_KEY_UNINITIALIZED: _status_t = 32771;
pub const SGX_ERROR_INVALID_ATT_KEY_CERT_DATA: _status_t = 32772;
pub const SGX_ERROR_PLATFORM_CERT_UNAVAILABLE: _status_t = 32773;
pub const SGX_INTERNAL_ERROR_ENCLAVE_CREATE_INTERRUPTED: _status_t = 61441;
pub type _status_t = u32;
pub use self::_status_t as sgx_status_t;
pub type va_list = __va_list;
pub type wchar_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::core::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::core::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct lldiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::core::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(arg1: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn abs(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn atof(arg1: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn atol(arg1: *const libc::c_char) -> libc::c_long;
}
extern "C" {
    pub fn bsearch(
        arg1: *const libc::c_void,
        arg2: *const libc::c_void,
        arg3: usize,
        arg4: usize,
        arg5: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn calloc(arg1: usize, arg2: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn div(arg1: libc::c_int, arg2: libc::c_int) -> div_t;
}
extern "C" {
    pub fn free(arg1: *mut libc::c_void);
}
extern "C" {
    pub fn labs(arg1: libc::c_long) -> libc::c_long;
}
extern "C" {
    pub fn ldiv(arg1: libc::c_long, arg2: libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn malloc(arg1: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn memalign(arg1: usize, arg2: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn qsort(
        arg1: *mut libc::c_void,
        arg2: usize,
        arg3: usize,
        arg4: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    );
}
extern "C" {
    pub fn realloc(arg1: *mut libc::c_void, arg2: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn strtod(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char) -> f64;
}
extern "C" {
    pub fn strtol(
        arg1: *const libc::c_char,
        arg2: *mut *mut libc::c_char,
        arg3: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn strtof(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char) -> f32;
}
extern "C" {
    pub fn atoll(arg1: *const libc::c_char) -> libc::c_longlong;
}
extern "C" {
    pub fn llabs(arg1: libc::c_longlong) -> libc::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: libc::c_longlong, arg2: libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn strtoll(
        arg1: *const libc::c_char,
        arg2: *mut *mut libc::c_char,
        arg3: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn strtoul(
        arg1: *const libc::c_char,
        arg2: *mut *mut libc::c_char,
        arg3: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn strtold(arg1: *const libc::c_char, arg2: *mut *mut libc::c_char) -> u128;
}
extern "C" {
    pub fn strtoull(
        arg1: *const libc::c_char,
        arg2: *mut *mut libc::c_char,
        arg3: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn mblen(arg1: *const libc::c_char, arg2: usize) -> libc::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const libc::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut libc::c_char, arg2: wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const libc::c_char, arg3: usize) -> libc::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut libc::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn alloca(arg1: usize) -> *mut libc::c_void;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _attributes_t {
    pub flags: u64,
    pub xfrm: u64,
}
#[test]
fn bindgen_test_layout__attributes_t() {
    assert_eq!(
        ::core::mem::size_of::<_attributes_t>(),
        16usize,
        concat!("Size of: ", stringify!(_attributes_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_attributes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_attributes_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_attributes_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_attributes_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_attributes_t>())).xfrm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_attributes_t),
            "::",
            stringify!(xfrm)
        )
    );
}
pub type sgx_attributes_t = _attributes_t;
pub type sgx_misc_select_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_misc_attribute_t {
    pub secs_attr: sgx_attributes_t,
    pub misc_select: sgx_misc_select_t,
}
#[test]
fn bindgen_test_layout__sgx_misc_attribute_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_misc_attribute_t>(),
        24usize,
        concat!("Size of: ", stringify!(_sgx_misc_attribute_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_misc_attribute_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_sgx_misc_attribute_t))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_sgx_misc_attribute_t>())).secs_attr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_misc_attribute_t),
            "::",
            stringify!(secs_attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_sgx_misc_attribute_t>())).misc_select as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_misc_attribute_t),
            "::",
            stringify!(misc_select)
        )
    );
}
pub type sgx_misc_attribute_t = _sgx_misc_attribute_t;
pub type sgx_enclave_id_t = u64;
pub type sgx_key_128bit_t = [u8; 16usize];
pub type sgx_isv_svn_t = u16;
pub type sgx_config_svn_t = u16;
pub type sgx_config_id_t = [u8; 64usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_cpu_svn_t {
    pub svn: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__sgx_cpu_svn_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_cpu_svn_t>(),
        16usize,
        concat!("Size of: ", stringify!(_sgx_cpu_svn_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_cpu_svn_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_cpu_svn_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_cpu_svn_t>())).svn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_cpu_svn_t),
            "::",
            stringify!(svn)
        )
    );
}
pub type sgx_cpu_svn_t = _sgx_cpu_svn_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_key_id_t {
    pub id: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_key_id_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_key_id_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_key_id_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_key_id_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_key_id_t),
            "::",
            stringify!(id)
        )
    );
}
pub type sgx_key_id_t = _sgx_key_id_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _key_request_t {
    pub key_name: u16,
    pub key_policy: u16,
    pub isv_svn: sgx_isv_svn_t,
    pub reserved1: u16,
    pub cpu_svn: sgx_cpu_svn_t,
    pub attribute_mask: sgx_attributes_t,
    pub key_id: sgx_key_id_t,
    pub misc_mask: sgx_misc_select_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved2: [u8; 434usize],
}
#[test]
fn bindgen_test_layout__key_request_t() {
    assert_eq!(
        ::core::mem::size_of::<_key_request_t>(),
        512usize,
        concat!("Size of: ", stringify!(_key_request_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_key_request_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_key_request_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).key_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(key_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).key_policy as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(key_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).isv_svn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(isv_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).reserved1 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).cpu_svn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(cpu_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).attribute_mask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(attribute_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).key_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(key_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).misc_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(misc_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).config_svn as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(config_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_key_request_t>())).reserved2 as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(_key_request_t),
            "::",
            stringify!(reserved2)
        )
    );
}
impl Default for _key_request_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_key_request_t = _key_request_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _sgx_measurement_t {
    pub m: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__sgx_measurement_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_measurement_t>(),
        32usize,
        concat!("Size of: ", stringify!(_sgx_measurement_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_measurement_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_measurement_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_measurement_t>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_measurement_t),
            "::",
            stringify!(m)
        )
    );
}
pub type sgx_measurement_t = _sgx_measurement_t;
pub type sgx_mac_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _sgx_report_data_t {
    pub d: [u8; 64usize],
}
#[test]
fn bindgen_test_layout__sgx_report_data_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_report_data_t>(),
        64usize,
        concat!("Size of: ", stringify!(_sgx_report_data_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_report_data_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_report_data_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_report_data_t>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_report_data_t),
            "::",
            stringify!(d)
        )
    );
}
impl Default for _sgx_report_data_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_report_data_t = _sgx_report_data_t;
pub type sgx_prod_id_t = u16;
pub type sgx_isvext_prod_id_t = [u8; 16usize];
pub type sgx_isvfamily_id_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _target_info_t {
    pub mr_enclave: sgx_measurement_t,
    pub attributes: sgx_attributes_t,
    pub reserved1: [u8; 2usize],
    pub config_svn: sgx_config_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved2: [u8; 8usize],
    pub config_id: sgx_config_id_t,
    pub reserved3: [u8; 384usize],
}
#[test]
fn bindgen_test_layout__target_info_t() {
    assert_eq!(
        ::core::mem::size_of::<_target_info_t>(),
        512usize,
        concat!("Size of: ", stringify!(_target_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_target_info_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_target_info_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).mr_enclave as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(mr_enclave)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).attributes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).reserved1 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).config_svn as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(config_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).misc_select as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(misc_select)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).reserved2 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).config_id as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(config_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_target_info_t>())).reserved3 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_target_info_t),
            "::",
            stringify!(reserved3)
        )
    );
}
impl Default for _target_info_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_target_info_t = _target_info_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _report_body_t {
    pub cpu_svn: sgx_cpu_svn_t,
    pub misc_select: sgx_misc_select_t,
    pub reserved1: [u8; 12usize],
    pub isv_ext_prod_id: sgx_isvext_prod_id_t,
    pub attributes: sgx_attributes_t,
    pub mr_enclave: sgx_measurement_t,
    pub reserved2: [u8; 32usize],
    pub mr_signer: sgx_measurement_t,
    pub reserved3: [u8; 32usize],
    pub config_id: sgx_config_id_t,
    pub isv_prod_id: sgx_prod_id_t,
    pub isv_svn: sgx_isv_svn_t,
    pub config_svn: sgx_config_svn_t,
    pub reserved4: [u8; 42usize],
    pub isv_family_id: sgx_isvfamily_id_t,
    pub report_data: sgx_report_data_t,
}
#[test]
fn bindgen_test_layout__report_body_t() {
    assert_eq!(
        ::core::mem::size_of::<_report_body_t>(),
        384usize,
        concat!("Size of: ", stringify!(_report_body_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_report_body_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_report_body_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).cpu_svn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(cpu_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).misc_select as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(misc_select)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved1 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_ext_prod_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_ext_prod_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).attributes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).mr_enclave as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(mr_enclave)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved2 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).mr_signer as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(mr_signer)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved3 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).config_id as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(config_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_prod_id as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_prod_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_svn as *const _ as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).config_svn as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(config_svn)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).reserved4 as *const _ as usize },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).isv_family_id as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(isv_family_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_body_t>())).report_data as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_body_t),
            "::",
            stringify!(report_data)
        )
    );
}
impl Default for _report_body_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_report_body_t = _report_body_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _report_t {
    pub body: sgx_report_body_t,
    pub key_id: sgx_key_id_t,
    pub mac: sgx_mac_t,
}
#[test]
fn bindgen_test_layout__report_t() {
    assert_eq!(
        ::core::mem::size_of::<_report_t>(),
        432usize,
        concat!("Size of: ", stringify!(_report_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_report_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_report_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_t>())).body as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_t),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_t>())).key_id as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_t),
            "::",
            stringify!(key_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_report_t>())).mac as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_report_t),
            "::",
            stringify!(mac)
        )
    );
}
impl Default for _report_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_report_t = _report_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_kss_config_t {
    pub config_id: sgx_config_id_t,
    pub config_svn: sgx_config_svn_t,
}
#[test]
fn bindgen_test_layout__sgx_kss_config_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_kss_config_t>(),
        66usize,
        concat!("Size of: ", stringify!(_sgx_kss_config_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_kss_config_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_kss_config_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_kss_config_t>())).config_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_kss_config_t),
            "::",
            stringify!(config_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_kss_config_t>())).config_svn as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_kss_config_t),
            "::",
            stringify!(config_svn)
        )
    );
}
impl Default for _sgx_kss_config_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_kss_config_t = _sgx_kss_config_t;
pub type sgx_launch_token_t = [u8; 1024usize];
extern "C" {
    pub fn sgx_create_enclave(
        file_name: *const libc::c_char,
        debug: libc::c_int,
        launch_token: *mut sgx_launch_token_t,
        launch_token_updated: *mut libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_create_enclave_ex(
        file_name: *const libc::c_char,
        debug: libc::c_int,
        launch_token: *mut sgx_launch_token_t,
        launch_token_updated: *mut libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
        ex_features: u32,
        ex_features_p: *mut *const libc::c_void,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_create_enclave_from_buffer_ex(
        buffer: *mut u8,
        buffer_size: usize,
        debug: libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
        ex_features: u32,
        ex_features_p: *mut *const libc::c_void,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_create_encrypted_enclave(
        file_name: *const libc::c_char,
        debug: libc::c_int,
        launch_token: *mut sgx_launch_token_t,
        launch_token_updated: *mut libc::c_int,
        enclave_id: *mut sgx_enclave_id_t,
        misc_attr: *mut sgx_misc_attribute_t,
        sealed_key: *mut u8,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_destroy_enclave(enclave_id: sgx_enclave_id_t) -> sgx_status_t;
}
extern "C" {
    pub fn sgx_get_target_info(
        enclave_id: sgx_enclave_id_t,
        target_info: *mut sgx_target_info_t,
    ) -> sgx_status_t;
}
pub type sgx_epid_group_id_t = [u8; 4usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _spid_t {
    pub id: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__spid_t() {
    assert_eq!(
        ::core::mem::size_of::<_spid_t>(),
        16usize,
        concat!("Size of: ", stringify!(_spid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_spid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_spid_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_spid_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_spid_t),
            "::",
            stringify!(id)
        )
    );
}
pub type sgx_spid_t = _spid_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _basename_t {
    pub name: [u8; 32usize],
}
#[test]
fn bindgen_test_layout__basename_t() {
    assert_eq!(
        ::core::mem::size_of::<_basename_t>(),
        32usize,
        concat!("Size of: ", stringify!(_basename_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_basename_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_basename_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_basename_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_basename_t),
            "::",
            stringify!(name)
        )
    );
}
pub type sgx_basename_t = _basename_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _quote_nonce {
    pub rand: [u8; 16usize],
}
#[test]
fn bindgen_test_layout__quote_nonce() {
    assert_eq!(
        ::core::mem::size_of::<_quote_nonce>(),
        16usize,
        concat!("Size of: ", stringify!(_quote_nonce))
    );
    assert_eq!(
        ::core::mem::align_of::<_quote_nonce>(),
        1usize,
        concat!("Alignment of ", stringify!(_quote_nonce))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_quote_nonce>())).rand as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_quote_nonce),
            "::",
            stringify!(rand)
        )
    );
}
pub type sgx_quote_nonce_t = _quote_nonce;
pub const SGX_UNLINKABLE_SIGNATURE: sgx_quote_sign_type_t = 0;
pub const SGX_LINKABLE_SIGNATURE: sgx_quote_sign_type_t = 1;
pub type sgx_quote_sign_type_t = u32;
#[repr(C, packed)]
pub struct _quote_t {
    pub version: u16,
    pub sign_type: u16,
    pub epid_group_id: sgx_epid_group_id_t,
    pub qe_svn: sgx_isv_svn_t,
    pub pce_svn: sgx_isv_svn_t,
    pub xeid: u32,
    pub basename: sgx_basename_t,
    pub report_body: sgx_report_body_t,
    pub signature_len: u32,
    pub signature: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout__quote_t() {
    assert_eq!(
        ::core::mem::size_of::<_quote_t>(),
        436usize,
        concat!("Size of: ", stringify!(_quote_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_quote_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_quote_t))
    );
}
impl Default for _quote_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_quote_t = _quote_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _platform_info {
    pub platform_info: [u8; 101usize],
}
#[test]
fn bindgen_test_layout__platform_info() {
    assert_eq!(
        ::core::mem::size_of::<_platform_info>(),
        101usize,
        concat!("Size of: ", stringify!(_platform_info))
    );
    assert_eq!(
        ::core::mem::align_of::<_platform_info>(),
        1usize,
        concat!("Alignment of ", stringify!(_platform_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_platform_info>())).platform_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_platform_info),
            "::",
            stringify!(platform_info)
        )
    );
}
impl Default for _platform_info {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_platform_info_t = _platform_info;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct _update_info_bit {
    pub ucodeUpdate: libc::c_int,
    pub csmeFwUpdate: libc::c_int,
    pub pswUpdate: libc::c_int,
}
#[test]
fn bindgen_test_layout__update_info_bit() {
    assert_eq!(
        ::core::mem::size_of::<_update_info_bit>(),
        12usize,
        concat!("Size of: ", stringify!(_update_info_bit))
    );
    assert_eq!(
        ::core::mem::align_of::<_update_info_bit>(),
        1usize,
        concat!("Alignment of ", stringify!(_update_info_bit))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_update_info_bit>())).ucodeUpdate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_update_info_bit),
            "::",
            stringify!(ucodeUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_update_info_bit>())).csmeFwUpdate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_update_info_bit),
            "::",
            stringify!(csmeFwUpdate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_update_info_bit>())).pswUpdate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_update_info_bit),
            "::",
            stringify!(pswUpdate)
        )
    );
}
pub type sgx_update_info_bit_t = _update_info_bit;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _att_key_id_t {
    pub att_key_id: [u8; 256usize],
}
#[test]
fn bindgen_test_layout__att_key_id_t() {
    assert_eq!(
        ::core::mem::size_of::<_att_key_id_t>(),
        256usize,
        concat!("Size of: ", stringify!(_att_key_id_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_att_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_att_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_att_key_id_t>())).att_key_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_att_key_id_t),
            "::",
            stringify!(att_key_id)
        )
    );
}
impl Default for _att_key_id_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_att_key_id_t = _att_key_id_t;
#[doc = " Describes a single attestation key.  Contains both QE identity and the attestation algorithm ID."]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_ql_att_key_id_t {
    #[doc = "< Structure ID"]
    pub id: u16,
    #[doc = "< Structure version"]
    pub version: u16,
    #[doc = "< Number of valid bytes in MRSIGNER."]
    pub mrsigner_length: u16,
    #[doc = "< SHA256 or SHA384 hash of the Public key that signed the QE."]
    #[doc = "< The lower bytes contain MRSIGNER.  Bytes beyond mrsigner_length '0'"]
    pub mrsigner: [u8; 48usize],
    #[doc = "< Legacy Product ID of the QE"]
    pub prod_id: u32,
    #[doc = "< Extended Product ID or the QE. All 0's for legacy format enclaves."]
    pub extended_prod_id: [u8; 16usize],
    #[doc = "< Config ID of the QE."]
    pub config_id: [u8; 64usize],
    #[doc = "< Family ID of the QE."]
    pub family_id: [u8; 16usize],
    #[doc = "< Identity of the attestation key algorithm."]
    pub algorithm_id: u32,
}
#[test]
fn bindgen_test_layout__sgx_ql_att_key_id_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_ql_att_key_id_t>(),
        158usize,
        concat!("Size of: ", stringify!(_sgx_ql_att_key_id_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_ql_att_key_id_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_ql_att_key_id_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).version as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).mrsigner_length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(mrsigner_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).mrsigner as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(mrsigner)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).prod_id as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(prod_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).extended_prod_id as *const _ as usize
        },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(extended_prod_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).config_id as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(config_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).family_id as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(family_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_sgx_ql_att_key_id_t>())).algorithm_id as *const _ as usize
        },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_ql_att_key_id_t),
            "::",
            stringify!(algorithm_id)
        )
    );
}
impl Default for _sgx_ql_att_key_id_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_ql_att_key_id_t = _sgx_ql_att_key_id_t;
#[doc = " Describes an extended attestation key.  Contains sgx_ql_att_key_id_t, spid and quote_type"]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _sgx_att_key_id_ext_t {
    pub base: sgx_ql_att_key_id_t,
    #[doc = "< Service Provider ID, should be 0s for ECDSA quote"]
    pub spid: [u8; 16usize],
    #[doc = "< For non-EPID quote, it should be 0"]
    #[doc = "< For EPID quote, it equals to sgx_quote_sign_type_t"]
    pub att_key_type: u16,
    #[doc = "< It should have the same size of sgx_att_key_id_t"]
    pub reserved: [u8; 80usize],
}
#[test]
fn bindgen_test_layout__sgx_att_key_id_ext_t() {
    assert_eq!(
        ::core::mem::size_of::<_sgx_att_key_id_ext_t>(),
        256usize,
        concat!("Size of: ", stringify!(_sgx_att_key_id_ext_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_sgx_att_key_id_ext_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_sgx_att_key_id_ext_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).spid as *const _ as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(spid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).att_key_type as *const _ as usize
        },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(att_key_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_sgx_att_key_id_ext_t>())).reserved as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_sgx_att_key_id_ext_t),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for _sgx_att_key_id_ext_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_att_key_id_ext_t = _sgx_att_key_id_ext_t;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct _qe_report_info_t {
    pub nonce: sgx_quote_nonce_t,
    pub app_enclave_target_info: sgx_target_info_t,
    pub qe_report: sgx_report_t,
}
#[test]
fn bindgen_test_layout__qe_report_info_t() {
    assert_eq!(
        ::core::mem::size_of::<_qe_report_info_t>(),
        960usize,
        concat!("Size of: ", stringify!(_qe_report_info_t))
    );
    assert_eq!(
        ::core::mem::align_of::<_qe_report_info_t>(),
        1usize,
        concat!("Alignment of ", stringify!(_qe_report_info_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_qe_report_info_t>())).nonce as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_qe_report_info_t),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<_qe_report_info_t>())).app_enclave_target_info as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_qe_report_info_t),
            "::",
            stringify!(app_enclave_target_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<_qe_report_info_t>())).qe_report as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(_qe_report_info_t),
            "::",
            stringify!(qe_report)
        )
    );
}
impl Default for _qe_report_info_t {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgx_qe_report_info_t = _qe_report_info_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_aes_gcm_mac {
    pub data: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_sgxsd_aes_gcm_mac() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_aes_gcm_mac>(),
        16usize,
        concat!("Size of: ", stringify!(sgxsd_aes_gcm_mac))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_aes_gcm_mac>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_aes_gcm_mac))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_aes_gcm_mac>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_aes_gcm_mac),
            "::",
            stringify!(data)
        )
    );
}
pub type sgxsd_aes_gcm_mac_t = sgxsd_aes_gcm_mac;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_aes_gcm_iv {
    pub data: [u8; 12usize],
}
#[test]
fn bindgen_test_layout_sgxsd_aes_gcm_iv() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_aes_gcm_iv>(),
        12usize,
        concat!("Size of: ", stringify!(sgxsd_aes_gcm_iv))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_aes_gcm_iv>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_aes_gcm_iv))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_aes_gcm_iv>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_aes_gcm_iv),
            "::",
            stringify!(data)
        )
    );
}
pub type sgxsd_aes_gcm_iv_t = sgxsd_aes_gcm_iv;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_aes_gcm_key {
    pub data: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_sgxsd_aes_gcm_key() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_aes_gcm_key>(),
        32usize,
        concat!("Size of: ", stringify!(sgxsd_aes_gcm_key))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_aes_gcm_key>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_aes_gcm_key))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_aes_gcm_key>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_aes_gcm_key),
            "::",
            stringify!(data)
        )
    );
}
pub type sgxsd_aes_gcm_key_t = sgxsd_aes_gcm_key;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_curve25519_public_key {
    pub x: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_sgxsd_curve25519_public_key() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_curve25519_public_key>(),
        32usize,
        concat!("Size of: ", stringify!(sgxsd_curve25519_public_key))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_curve25519_public_key>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_curve25519_public_key))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_curve25519_public_key>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_curve25519_public_key),
            "::",
            stringify!(x)
        )
    );
}
pub type sgxsd_curve25519_public_key_t = sgxsd_curve25519_public_key;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_request_negotiation_request {
    pub client_pubkey: sgxsd_curve25519_public_key_t,
}
#[test]
fn bindgen_test_layout_sgxsd_request_negotiation_request() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_request_negotiation_request>(),
        32usize,
        concat!("Size of: ", stringify!(sgxsd_request_negotiation_request))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_request_negotiation_request>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sgxsd_request_negotiation_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_request_negotiation_request>())).client_pubkey as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_request),
            "::",
            stringify!(client_pubkey)
        )
    );
}
pub type sgxsd_request_negotiation_request_t = sgxsd_request_negotiation_request;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_pending_request_id {
    pub data: [u8; 8usize],
    pub iv: sgxsd_aes_gcm_iv_t,
    pub mac: sgxsd_aes_gcm_mac_t,
}
#[test]
fn bindgen_test_layout_sgxsd_pending_request_id() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_pending_request_id>(),
        36usize,
        concat!("Size of: ", stringify!(sgxsd_pending_request_id))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_pending_request_id>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_pending_request_id))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_pending_request_id>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_pending_request_id),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_pending_request_id>())).iv as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_pending_request_id),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_pending_request_id>())).mac as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_pending_request_id),
            "::",
            stringify!(mac)
        )
    );
}
pub type sgxsd_pending_request_id_t = sgxsd_pending_request_id;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_request_negotiation_response {
    pub server_static_pubkey: sgxsd_curve25519_public_key_t,
    pub server_ephemeral_pubkey: sgxsd_curve25519_public_key_t,
    pub encrypted_pending_request_id: sgxsd_request_negotiation_response__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_request_negotiation_response__bindgen_ty_1 {
    pub data: [u8; 36usize],
    pub iv: sgxsd_aes_gcm_iv_t,
    pub mac: sgxsd_aes_gcm_mac_t,
}
#[test]
fn bindgen_test_layout_sgxsd_request_negotiation_response__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_request_negotiation_response__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_request_negotiation_response__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_request_negotiation_response__bindgen_ty_1>())).data
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_request_negotiation_response__bindgen_ty_1>())).iv
                as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_request_negotiation_response__bindgen_ty_1>())).mac
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response__bindgen_ty_1),
            "::",
            stringify!(mac)
        )
    );
}
impl Default for sgxsd_request_negotiation_response__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sgxsd_request_negotiation_response() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_request_negotiation_response>(),
        128usize,
        concat!("Size of: ", stringify!(sgxsd_request_negotiation_response))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_request_negotiation_response>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sgxsd_request_negotiation_response)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_request_negotiation_response>())).server_static_pubkey
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response),
            "::",
            stringify!(server_static_pubkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_request_negotiation_response>())).server_ephemeral_pubkey
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response),
            "::",
            stringify!(server_ephemeral_pubkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_request_negotiation_response>()))
                .encrypted_pending_request_id as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_request_negotiation_response),
            "::",
            stringify!(encrypted_pending_request_id)
        )
    );
}
impl Default for sgxsd_request_negotiation_response {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_request_negotiation_response_t = sgxsd_request_negotiation_response;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_msg_tag {
    pub __bindgen_anon_1: sgxsd_msg_tag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sgxsd_msg_tag__bindgen_ty_1 {
    pub p_tag: *mut libc::c_void,
    pub tag: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sgxsd_msg_tag__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_tag__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sgxsd_msg_tag__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_tag__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_tag__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_msg_tag__bindgen_ty_1>())).p_tag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_tag__bindgen_ty_1),
            "::",
            stringify!(p_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_msg_tag__bindgen_ty_1>())).tag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_tag__bindgen_ty_1),
            "::",
            stringify!(tag)
        )
    );
}
impl Default for sgxsd_msg_tag__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sgxsd_msg_tag() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_tag>(),
        8usize,
        concat!("Size of: ", stringify!(sgxsd_msg_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_tag))
    );
}
impl Default for sgxsd_msg_tag {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_msg_tag_t = sgxsd_msg_tag;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_msg_header {
    pub iv: sgxsd_aes_gcm_iv_t,
    pub mac: sgxsd_aes_gcm_mac_t,
    pub pending_request_id: sgxsd_pending_request_id_t,
}
#[test]
fn bindgen_test_layout_sgxsd_msg_header() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_header>(),
        64usize,
        concat!("Size of: ", stringify!(sgxsd_msg_header))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_header>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_header))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_header>())).iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_header),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_header>())).mac as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_header),
            "::",
            stringify!(mac)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_msg_header>())).pending_request_id as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_header),
            "::",
            stringify!(pending_request_id)
        )
    );
}
pub type sgxsd_msg_header_t = sgxsd_msg_header;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_node_init_args {
    pub pending_requests_table_order: u8,
}
#[test]
fn bindgen_test_layout_sgxsd_node_init_args() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_node_init_args>(),
        1usize,
        concat!("Size of: ", stringify!(sgxsd_node_init_args))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_node_init_args>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_node_init_args))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_node_init_args>())).pending_requests_table_order
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_node_init_args),
            "::",
            stringify!(pending_requests_table_order)
        )
    );
}
pub type sgxsd_node_init_args_t = sgxsd_node_init_args;
pub type sgxsd_server_state_handle_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_status {
    pub ok: bool,
    pub name: *const libc::c_char,
    pub code: i64,
}
#[test]
fn bindgen_test_layout_sgxsd_status() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_status>(),
        24usize,
        concat!("Size of: ", stringify!(sgxsd_status))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_status>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_status))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_status>())).ok as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_status),
            "::",
            stringify!(ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_status>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_status),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_status>())).code as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_status),
            "::",
            stringify!(code)
        )
    );
}
impl Default for sgxsd_status {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_status_t = sgxsd_status;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_enclave {
    pub id: sgx_enclave_id_t,
    pub __bindgen_anon_1: sgxsd_enclave__bindgen_ty_1,
    pub launch_token: sgx_launch_token_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sgxsd_enclave__bindgen_ty_1 {
    pub gid: sgx_epid_group_id_t,
    pub gid32: u32,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_sgxsd_enclave__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_enclave__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(sgxsd_enclave__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_enclave__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(sgxsd_enclave__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_enclave__bindgen_ty_1>())).gid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_enclave__bindgen_ty_1),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_enclave__bindgen_ty_1>())).gid32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_enclave__bindgen_ty_1),
            "::",
            stringify!(gid32)
        )
    );
}
impl Default for sgxsd_enclave__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_sgxsd_enclave() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_enclave>(),
        1040usize,
        concat!("Size of: ", stringify!(sgxsd_enclave))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_enclave>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_enclave))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_enclave>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_enclave),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_enclave>())).launch_token as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_enclave),
            "::",
            stringify!(launch_token)
        )
    );
}
impl Default for sgxsd_enclave {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_enclave_t = sgxsd_enclave;
pub type sgxsd_start_callback_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: sgxsd_enclave_t, arg2: *mut __va_list_tag) -> sgxsd_status_t,
>;
extern "C" {
    pub fn sgxsd_start(
        enclave_path: *const libc::c_char,
        debug: bool,
        p_node_init_args: *const sgxsd_node_init_args_t,
        p_callback: sgxsd_start_callback_t,
        ...
    ) -> sgxsd_status_t;
}
extern "C" {
    pub fn sgxsd_get_next_quote(
        enclave_id: sgx_enclave_id_t,
        spid: sgx_spid_t,
        p_sig_rl: *const u8,
        sig_rl_size: u32,
        p_quote: *mut sgx_quote_t,
        quote_size: u32,
    ) -> sgxsd_status_t;
}
pub const SGXSD_ERROR_PENDING_REQUEST_NOT_FOUND: sgxsd_status_code = 65537;
pub type sgxsd_status_code = u32;
pub use self::sgxsd_status_code as sgxsd_status_code_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_msg_buf {
    pub data: *mut u8,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_sgxsd_msg_buf() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_buf>(),
        16usize,
        concat!("Size of: ", stringify!(sgxsd_msg_buf))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_buf))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_buf>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_buf),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_buf>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_buf),
            "::",
            stringify!(size)
        )
    );
}
impl Default for sgxsd_msg_buf {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_msg_buf_t = sgxsd_msg_buf;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sgxsd_msg_from {
    pub valid: bool,
    pub tag: sgxsd_msg_tag_t,
    pub server_key: sgxsd_aes_gcm_key_t,
}
#[test]
fn bindgen_test_layout_sgxsd_msg_from() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_msg_from>(),
        48usize,
        concat!("Size of: ", stringify!(sgxsd_msg_from))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_msg_from>(),
        8usize,
        concat!("Alignment of ", stringify!(sgxsd_msg_from))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_from>())).valid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_from),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_from>())).tag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_from),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_msg_from>())).server_key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_msg_from),
            "::",
            stringify!(server_key)
        )
    );
}
impl Default for sgxsd_msg_from {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
pub type sgxsd_msg_from_t = sgxsd_msg_from;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgxsd_server_state {
    _unused: [u8; 0],
}
pub type sgxsd_server_state_t = sgxsd_server_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgxsd_server_init_args {
    _unused: [u8; 0],
}
pub type sgxsd_server_init_args_t = sgxsd_server_init_args;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgxsd_server_handle_call_args {
    _unused: [u8; 0],
}
pub type sgxsd_server_handle_call_args_t = sgxsd_server_handle_call_args;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgxsd_server_terminate_args {
    _unused: [u8; 0],
}
pub type sgxsd_server_terminate_args_t = sgxsd_server_terminate_args;
extern "C" {
    pub fn sgxsd_enclave_server_init(
        p_args: *const sgxsd_server_init_args_t,
        pp_state: *mut *mut sgxsd_server_state_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_server_handle_call(
        p_args: *const sgxsd_server_handle_call_args_t,
        msg: sgxsd_msg_buf_t,
        from: sgxsd_msg_from_t,
        pp_state: *mut *mut sgxsd_server_state_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_server_terminate(
        p_args: *const sgxsd_server_terminate_args_t,
        p_state: *mut sgxsd_server_state_t,
    ) -> sgx_status_t;
}
pub type phone_t = u64;
extern "C" {
    pub fn sgxsd_enclave_create_ratelimit_fingerprint(
        fingerprint_key: *mut u8,
        args: *const sgxsd_server_handle_call_args_t,
        msg: sgxsd_msg_buf_t,
        from: sgxsd_msg_from_t,
        fingerprint: *mut u8,
        fingerprint_size: usize,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_server_reply(
        reply_buf: sgxsd_msg_buf_t,
        p_from: *mut sgxsd_msg_from_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_enclave_server_noreply(p_from: *mut sgxsd_msg_from_t) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_aes_gcm_encrypt(
        p_key: *const sgxsd_aes_gcm_key_t,
        p_src: *const libc::c_void,
        src_len: u32,
        p_dst: *mut libc::c_void,
        p_iv: *const sgxsd_aes_gcm_iv_t,
        p_aad: *const libc::c_void,
        aad_len: u32,
        p_out_mac: *mut sgxsd_aes_gcm_mac_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn sgxsd_aes_gcm_decrypt(
        p_key: *const sgxsd_aes_gcm_key_t,
        p_src: *const libc::c_void,
        src_len: u32,
        p_dst: *mut libc::c_void,
        p_iv: *const sgxsd_aes_gcm_iv_t,
        p_aad: *const libc::c_void,
        aad_len: u32,
        p_in_mac: *const sgxsd_aes_gcm_mac_t,
    ) -> sgx_status_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_rand_buf {
    pub x: [u8; 32usize],
}
#[test]
fn bindgen_test_layout_sgxsd_rand_buf() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_rand_buf>(),
        32usize,
        concat!("Size of: ", stringify!(sgxsd_rand_buf))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_rand_buf>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_rand_buf))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sgxsd_rand_buf>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_rand_buf),
            "::",
            stringify!(x)
        )
    );
}
pub type sgxsd_rand_buf_t = sgxsd_rand_buf;
pub type sgxsd_curve25519_private_key_t = sgxsd_rand_buf;
extern "C" {
    pub fn sgxsd_enclave_read_rand(p_privkey: *mut sgxsd_rand_buf_t) -> sgx_status_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct sgxsd_curve25519_key_pair {
    pub privkey: sgxsd_curve25519_private_key_t,
    pub pubkey: sgxsd_curve25519_public_key_t,
}
#[test]
fn bindgen_test_layout_sgxsd_curve25519_key_pair() {
    assert_eq!(
        ::core::mem::size_of::<sgxsd_curve25519_key_pair>(),
        64usize,
        concat!("Size of: ", stringify!(sgxsd_curve25519_key_pair))
    );
    assert_eq!(
        ::core::mem::align_of::<sgxsd_curve25519_key_pair>(),
        1usize,
        concat!("Alignment of ", stringify!(sgxsd_curve25519_key_pair))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_curve25519_key_pair>())).privkey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_curve25519_key_pair),
            "::",
            stringify!(privkey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sgxsd_curve25519_key_pair>())).pubkey as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sgxsd_curve25519_key_pair),
            "::",
            stringify!(pubkey)
        )
    );
}
pub type sgxsd_curve25519_key_pair_t = sgxsd_curve25519_key_pair;
pub type errno_t = libc::c_int;
extern "C" {
    pub fn memchr(arg1: *const libc::c_void, arg2: libc::c_int, arg3: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn memcmp(arg1: *const libc::c_void, arg2: *const libc::c_void, arg3: usize)
        -> libc::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut libc::c_void,
        arg2: *const libc::c_void,
        arg3: usize,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memcpy_verw(
        arg1: *mut libc::c_void,
        arg2: *const libc::c_void,
        arg3: usize,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memmove(
        arg1: *mut libc::c_void,
        arg2: *const libc::c_void,
        arg3: usize,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memmove_verw(
        arg1: *mut libc::c_void,
        arg2: *const libc::c_void,
        arg3: usize,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn memset(arg1: *mut libc::c_void, arg2: libc::c_int, arg3: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn memset_verw(
        arg1: *mut libc::c_void,
        arg2: libc::c_int,
        arg3: usize,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn strchr(arg1: *const libc::c_char, arg2: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcmp(arg1: *const libc::c_char, arg2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const libc::c_char, arg2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strcspn(arg1: *const libc::c_char, arg2: *const libc::c_char) -> usize;
}
extern "C" {
    pub fn strerror(arg1: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strlen(arg1: *const libc::c_char) -> usize;
}
extern "C" {
    pub fn strncat(
        arg1: *mut libc::c_char,
        arg2: *const libc::c_char,
        arg3: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strncmp(
        arg1: *const libc::c_char,
        arg2: *const libc::c_char,
        arg3: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn strncpy(
        arg1: *mut libc::c_char,
        arg2: *const libc::c_char,
        arg3: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strpbrk(arg1: *const libc::c_char, arg2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strrchr(arg1: *const libc::c_char, arg2: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn strspn(arg1: *const libc::c_char, arg2: *const libc::c_char) -> usize;
}
extern "C" {
    pub fn strstr(arg1: *const libc::c_char, arg2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strtok(arg1: *mut libc::c_char, arg2: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn strxfrm(arg1: *mut libc::c_char, arg2: *const libc::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn strlcpy(arg1: *mut libc::c_char, arg2: *const libc::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn memset_s(s: *mut libc::c_void, smax: usize, c: libc::c_int, n: usize) -> errno_t;
}
extern "C" {
    pub fn memset_verw_s(s: *mut libc::c_void, smax: usize, c: libc::c_int, n: usize) -> errno_t;
}
extern "C" {
    pub fn strndup(arg1: *const libc::c_char, arg2: usize) -> *mut libc::c_char;
}
extern "C" {
    pub fn strnlen(arg1: *const libc::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn consttime_memequal(
        b1: *const libc::c_void,
        b2: *const libc::c_void,
        len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn bcmp(arg1: *const libc::c_void, arg2: *const libc::c_void, arg3: usize) -> libc::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const libc::c_void, arg2: *mut libc::c_void, arg3: usize);
}
extern "C" {
    pub fn bzero(arg1: *mut libc::c_void, arg2: usize);
}
extern "C" {
    pub fn index(arg1: *const libc::c_char, arg2: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn mempcpy(
        arg1: *mut libc::c_void,
        arg2: *const libc::c_void,
        arg3: usize,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn rindex(arg1: *const libc::c_char, arg2: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn stpncpy(
        dest: *mut libc::c_char,
        src: *const libc::c_char,
        n: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strcasecmp(arg1: *const libc::c_char, arg2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const libc::c_char,
        arg2: *const libc::c_char,
        arg3: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn ffs(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ffsl(arg1: libc::c_long) -> libc::c_int;
}
extern "C" {
    pub fn ffsll(arg1: libc::c_longlong) -> libc::c_int;
}
extern "C" {
    pub fn strtok_r(
        arg1: *mut libc::c_char,
        arg2: *const libc::c_char,
        arg3: *mut *mut libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn strerror_r(arg1: libc::c_int, arg2: *mut libc::c_char, arg3: usize) -> libc::c_int;
}
#[doc = " \\brief Class type for hash function implementations."]
#[doc = ""]
#[doc = " A `br_hash_class` instance references the methods implementing a hash"]
#[doc = " function. Constant instances of this structure are defined for each"]
#[doc = " implemented hash function. Such instances are also called \"vtables\"."]
#[doc = ""]
#[doc = " Vtables are used to support object-oriented programming, as"]
#[doc = " described on [the BearSSL Web site](https://www.bearssl.org/oop.html)."]
pub type br_hash_class = br_hash_class_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq, Eq)]
pub struct br_hash_class_ {
    #[doc = " \\brief Size (in bytes) of the context structure appropriate for"]
    #[doc = " computing this hash function."]
    pub context_size: usize,
    #[doc = " \\brief Descriptor word that contains information about the hash"]
    #[doc = " function."]
    #[doc = ""]
    #[doc = " For each word `xxx` described below, use `BR_HASHDESC_xxx_OFF`"]
    #[doc = " and `BR_HASHDESC_xxx_MASK` to access the specific value, as"]
    #[doc = " follows:"]
    #[doc = ""]
    #[doc = "     (hf->desc >> BR_HASHDESC_xxx_OFF) & BR_HASHDESC_xxx_MASK"]
    #[doc = ""]
    #[doc = " The defined elements are:"]
    #[doc = ""]
    #[doc = "  - `ID`: the symbolic identifier for the function, as defined"]
    #[doc = "    in [TLS](https://tools.ietf.org/html/rfc5246#section-7.4.1.4.1)"]
    #[doc = "    (MD5 = 1, SHA-1 = 2,...)."]
    #[doc = ""]
    #[doc = "  - `OUT`: hash output size, in bytes."]
    #[doc = ""]
    #[doc = "  - `STATE`: internal running state size, in bytes."]
    #[doc = ""]
    #[doc = "  - `LBLEN`: base-2 logarithm for the internal block size, as"]
    #[doc = "    defined for HMAC processing (this is 6 for MD5, SHA-1, SHA-224"]
    #[doc = "    and SHA-256, since these functions use 64-byte blocks; for"]
    #[doc = "    SHA-384 and SHA-512, this is 7, corresponding to their"]
    #[doc = "    128-byte blocks)."]
    #[doc = ""]
    #[doc = " The descriptor may contain a few other flags."]
    pub desc: u32,
    #[doc = " \\brief Initialisation method."]
    #[doc = ""]
    #[doc = " This method takes as parameter a pointer to a context area,"]
    #[doc = " that it initialises. The first field of the context is set"]
    #[doc = " to this vtable; other elements are initialised for a new hash"]
    #[doc = " computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to (the first field of) the context."]
    pub init: ::core::option::Option<unsafe extern "C" fn(ctx: *mut *const br_hash_class)>,
    #[doc = " \\brief Data injection method."]
    #[doc = ""]
    #[doc = " The `len` bytes starting at address `data` are injected into"]
    #[doc = " the running hash computation incarnated by the specified"]
    #[doc = " context. The context is updated accordingly. It is allowed"]
    #[doc = " to have `len == 0`, in which case `data` is ignored (and could"]
    #[doc = " be `NULL`), and nothing happens."]
    #[doc = " on the input data."]
    #[doc = ""]
    #[doc = " \\param ctx    pointer to (the first field of) the context."]
    #[doc = " \\param data   pointer to the first data byte to inject."]
    #[doc = " \\param len    number of bytes to inject."]
    pub update: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut *const br_hash_class, data: *const libc::c_void, len: usize),
    >,
    #[doc = " \\brief Produce hash output."]
    #[doc = ""]
    #[doc = " The hash output corresponding to all data bytes injected in the"]
    #[doc = " context since the last `init()` call is computed, and written"]
    #[doc = " in the buffer pointed to by `dst`. The hash output size depends"]
    #[doc = " on the implemented hash function (e.g. 16 bytes for MD5)."]
    #[doc = " The context is _not_ modified by this call, so further bytes"]
    #[doc = " may be afterwards injected to continue the current computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to (the first field of) the context."]
    #[doc = " \\param dst   destination buffer for the hash output."]
    pub out: ::core::option::Option<
        unsafe extern "C" fn(ctx: *const *const br_hash_class, dst: *mut libc::c_void),
    >,
    #[doc = " \\brief Get running state."]
    #[doc = ""]
    #[doc = " This method saves the current running state into the `dst`"]
    #[doc = " buffer. What constitutes the \"running state\" depends on the"]
    #[doc = " hash function; for Merkle-Damg\u{e5}rd hash functions (like"]
    #[doc = " MD5 or SHA-1), this is the output obtained after processing"]
    #[doc = " each block. The number of bytes injected so far is returned."]
    #[doc = " The context is not modified by this call."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to (the first field of) the context."]
    #[doc = " \\param dst   destination buffer for the state."]
    #[doc = " \\return  the injected total byte length."]
    pub state: ::core::option::Option<
        unsafe extern "C" fn(ctx: *const *const br_hash_class, dst: *mut libc::c_void) -> u64,
    >,
    #[doc = " \\brief Set running state."]
    #[doc = ""]
    #[doc = " This methods replaces the running state for the function."]
    #[doc = ""]
    #[doc = " \\param ctx     pointer to (the first field of) the context."]
    #[doc = " \\param stb     source buffer for the state."]
    #[doc = " \\param count   injected total byte length."]
    pub set_state: ::core::option::Option<
        unsafe extern "C" fn(ctx: *mut *const br_hash_class, stb: *const libc::c_void, count: u64),
    >,
}
#[test]
fn bindgen_test_layout_br_hash_class_() {
    assert_eq!(
        ::core::mem::size_of::<br_hash_class_>(),
        56usize,
        concat!("Size of: ", stringify!(br_hash_class_))
    );
    assert_eq!(
        ::core::mem::align_of::<br_hash_class_>(),
        8usize,
        concat!("Alignment of ", stringify!(br_hash_class_))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_class_>())).context_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_class_),
            "::",
            stringify!(context_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_class_>())).desc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_class_),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_class_>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_class_),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_class_>())).update as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_class_),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_class_>())).out as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_class_),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_class_>())).state as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_class_),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_class_>())).set_state as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_class_),
            "::",
            stringify!(set_state)
        )
    );
}
extern "C" {
    pub static br_md5_vtable: br_hash_class;
}
#[doc = " \\brief MD5 context."]
#[doc = ""]
#[doc = " First field is a pointer to the vtable; it is set by the initialisation"]
#[doc = " function. Other fields are not supposed to be accessed by user code."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_md5_context {
    #[doc = " \\brief Pointer to vtable for this context."]
    pub vtable: *const br_hash_class,
    pub buf: [libc::c_uchar; 64usize],
    pub count: u64,
    pub val: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_br_md5_context() {
    assert_eq!(
        ::core::mem::size_of::<br_md5_context>(),
        96usize,
        concat!("Size of: ", stringify!(br_md5_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_md5_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_md5_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5_context>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5_context),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5_context>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5_context>())).count as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5_context),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5_context>())).val as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5_context),
            "::",
            stringify!(val)
        )
    );
}
impl Default for br_md5_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief MD5 context initialisation."]
    #[doc = ""]
    #[doc = " This function initialises or resets a context for a new MD5"]
    #[doc = " computation. It also sets the vtable pointer."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    pub fn br_md5_init(ctx: *mut br_md5_context);
}
extern "C" {
    #[doc = " \\brief Inject some data bytes in a running MD5 computation."]
    #[doc = ""]
    #[doc = " The provided context is updated with some data bytes. If the number"]
    #[doc = " of bytes (`len`) is zero, then the data pointer (`data`) is ignored"]
    #[doc = " and may be `NULL`, and this function does nothing."]
    #[doc = ""]
    #[doc = " \\param ctx    pointer to the context structure."]
    #[doc = " \\param data   pointer to the injected data."]
    #[doc = " \\param len    injected data length (in bytes)."]
    pub fn br_md5_update(ctx: *mut br_md5_context, data: *const libc::c_void, len: usize);
}
extern "C" {
    #[doc = " \\brief Compute MD5 output."]
    #[doc = ""]
    #[doc = " The MD5 output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `out`. The context"]
    #[doc = " itself is not modified, so extra bytes may be injected afterwards"]
    #[doc = " to continue that computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the hash output."]
    pub fn br_md5_out(ctx: *const br_md5_context, out: *mut libc::c_void);
}
extern "C" {
    #[doc = " \\brief Save MD5 running state."]
    #[doc = ""]
    #[doc = " The running state for MD5 (output of the last internal block"]
    #[doc = " processing) is written in the buffer pointed to by `out`. The"]
    #[doc = " number of bytes injected since the last initialisation or reset"]
    #[doc = " call is returned. The context is not modified."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the running state."]
    #[doc = " \\return  the injected total byte length."]
    pub fn br_md5_state(ctx: *const br_md5_context, out: *mut libc::c_void) -> u64;
}
extern "C" {
    #[doc = " \\brief Restore MD5 running state."]
    #[doc = ""]
    #[doc = " The running state for MD5 is set to the provided values."]
    #[doc = ""]
    #[doc = " \\param ctx     pointer to the context structure."]
    #[doc = " \\param stb     source buffer for the running state."]
    #[doc = " \\param count   the injected total byte length."]
    pub fn br_md5_set_state(ctx: *mut br_md5_context, stb: *const libc::c_void, count: u64);
}
extern "C" {
    pub static br_sha1_vtable: br_hash_class;
}
#[doc = " \\brief SHA-1 context."]
#[doc = ""]
#[doc = " First field is a pointer to the vtable; it is set by the initialisation"]
#[doc = " function. Other fields are not supposed to be accessed by user code."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_sha1_context {
    #[doc = " \\brief Pointer to vtable for this context."]
    pub vtable: *const br_hash_class,
    pub buf: [libc::c_uchar; 64usize],
    pub count: u64,
    pub val: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_br_sha1_context() {
    assert_eq!(
        ::core::mem::size_of::<br_sha1_context>(),
        104usize,
        concat!("Size of: ", stringify!(br_sha1_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_sha1_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_sha1_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha1_context>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha1_context),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha1_context>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha1_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha1_context>())).count as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha1_context),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha1_context>())).val as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha1_context),
            "::",
            stringify!(val)
        )
    );
}
impl Default for br_sha1_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief SHA-1 context initialisation."]
    #[doc = ""]
    #[doc = " This function initialises or resets a context for a new SHA-1"]
    #[doc = " computation. It also sets the vtable pointer."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    pub fn br_sha1_init(ctx: *mut br_sha1_context);
}
extern "C" {
    #[doc = " \\brief Inject some data bytes in a running SHA-1 computation."]
    #[doc = ""]
    #[doc = " The provided context is updated with some data bytes. If the number"]
    #[doc = " of bytes (`len`) is zero, then the data pointer (`data`) is ignored"]
    #[doc = " and may be `NULL`, and this function does nothing."]
    #[doc = ""]
    #[doc = " \\param ctx    pointer to the context structure."]
    #[doc = " \\param data   pointer to the injected data."]
    #[doc = " \\param len    injected data length (in bytes)."]
    pub fn br_sha1_update(ctx: *mut br_sha1_context, data: *const libc::c_void, len: usize);
}
extern "C" {
    #[doc = " \\brief Compute SHA-1 output."]
    #[doc = ""]
    #[doc = " The SHA-1 output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `out`. The context"]
    #[doc = " itself is not modified, so extra bytes may be injected afterwards"]
    #[doc = " to continue that computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the hash output."]
    pub fn br_sha1_out(ctx: *const br_sha1_context, out: *mut libc::c_void);
}
extern "C" {
    #[doc = " \\brief Save SHA-1 running state."]
    #[doc = ""]
    #[doc = " The running state for SHA-1 (output of the last internal block"]
    #[doc = " processing) is written in the buffer pointed to by `out`. The"]
    #[doc = " number of bytes injected since the last initialisation or reset"]
    #[doc = " call is returned. The context is not modified."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the running state."]
    #[doc = " \\return  the injected total byte length."]
    pub fn br_sha1_state(ctx: *const br_sha1_context, out: *mut libc::c_void) -> u64;
}
extern "C" {
    #[doc = " \\brief Restore SHA-1 running state."]
    #[doc = ""]
    #[doc = " The running state for SHA-1 is set to the provided values."]
    #[doc = ""]
    #[doc = " \\param ctx     pointer to the context structure."]
    #[doc = " \\param stb     source buffer for the running state."]
    #[doc = " \\param count   the injected total byte length."]
    pub fn br_sha1_set_state(ctx: *mut br_sha1_context, stb: *const libc::c_void, count: u64);
}
extern "C" {
    pub static br_sha224_vtable: br_hash_class;
}
#[doc = " \\brief SHA-224 context."]
#[doc = ""]
#[doc = " First field is a pointer to the vtable; it is set by the initialisation"]
#[doc = " function. Other fields are not supposed to be accessed by user code."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_sha224_context {
    #[doc = " \\brief Pointer to vtable for this context."]
    pub vtable: *const br_hash_class,
    pub buf: [libc::c_uchar; 64usize],
    pub count: u64,
    pub val: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_br_sha224_context() {
    assert_eq!(
        ::core::mem::size_of::<br_sha224_context>(),
        112usize,
        concat!("Size of: ", stringify!(br_sha224_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_sha224_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_sha224_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha224_context>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha224_context),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha224_context>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha224_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha224_context>())).count as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha224_context),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha224_context>())).val as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha224_context),
            "::",
            stringify!(val)
        )
    );
}
impl Default for br_sha224_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief SHA-224 context initialisation."]
    #[doc = ""]
    #[doc = " This function initialises or resets a context for a new SHA-224"]
    #[doc = " computation. It also sets the vtable pointer."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    pub fn br_sha224_init(ctx: *mut br_sha224_context);
}
extern "C" {
    #[doc = " \\brief Inject some data bytes in a running SHA-224 computation."]
    #[doc = ""]
    #[doc = " The provided context is updated with some data bytes. If the number"]
    #[doc = " of bytes (`len`) is zero, then the data pointer (`data`) is ignored"]
    #[doc = " and may be `NULL`, and this function does nothing."]
    #[doc = ""]
    #[doc = " \\param ctx    pointer to the context structure."]
    #[doc = " \\param data   pointer to the injected data."]
    #[doc = " \\param len    injected data length (in bytes)."]
    pub fn br_sha224_update(ctx: *mut br_sha224_context, data: *const libc::c_void, len: usize);
}
extern "C" {
    #[doc = " \\brief Compute SHA-224 output."]
    #[doc = ""]
    #[doc = " The SHA-224 output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `out`. The context"]
    #[doc = " itself is not modified, so extra bytes may be injected afterwards"]
    #[doc = " to continue that computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the hash output."]
    pub fn br_sha224_out(ctx: *const br_sha224_context, out: *mut libc::c_void);
}
extern "C" {
    #[doc = " \\brief Save SHA-224 running state."]
    #[doc = ""]
    #[doc = " The running state for SHA-224 (output of the last internal block"]
    #[doc = " processing) is written in the buffer pointed to by `out`. The"]
    #[doc = " number of bytes injected since the last initialisation or reset"]
    #[doc = " call is returned. The context is not modified."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the running state."]
    #[doc = " \\return  the injected total byte length."]
    pub fn br_sha224_state(ctx: *const br_sha224_context, out: *mut libc::c_void) -> u64;
}
extern "C" {
    #[doc = " \\brief Restore SHA-224 running state."]
    #[doc = ""]
    #[doc = " The running state for SHA-224 is set to the provided values."]
    #[doc = ""]
    #[doc = " \\param ctx     pointer to the context structure."]
    #[doc = " \\param stb     source buffer for the running state."]
    #[doc = " \\param count   the injected total byte length."]
    pub fn br_sha224_set_state(ctx: *mut br_sha224_context, stb: *const libc::c_void, count: u64);
}
extern "C" {
    pub static br_sha256_vtable: br_hash_class;
}
pub type br_sha256_context = br_sha224_context;
extern "C" {
    #[doc = " \\brief SHA-256 context initialisation."]
    #[doc = ""]
    #[doc = " This function initialises or resets a context for a new SHA-256"]
    #[doc = " computation. It also sets the vtable pointer."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    pub fn br_sha256_init(ctx: *mut br_sha256_context);
}
extern "C" {
    #[doc = " \\brief Compute SHA-256 output."]
    #[doc = ""]
    #[doc = " The SHA-256 output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `out`. The context"]
    #[doc = " itself is not modified, so extra bytes may be injected afterwards"]
    #[doc = " to continue that computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the hash output."]
    pub fn br_sha256_out(ctx: *const br_sha256_context, out: *mut libc::c_void);
}
extern "C" {
    pub static br_sha384_vtable: br_hash_class;
}
#[doc = " \\brief SHA-384 context."]
#[doc = ""]
#[doc = " First field is a pointer to the vtable; it is set by the initialisation"]
#[doc = " function. Other fields are not supposed to be accessed by user code."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_sha384_context {
    #[doc = " \\brief Pointer to vtable for this context."]
    pub vtable: *const br_hash_class,
    pub buf: [libc::c_uchar; 128usize],
    pub count: u64,
    pub val: [u64; 8usize],
}
#[test]
fn bindgen_test_layout_br_sha384_context() {
    assert_eq!(
        ::core::mem::size_of::<br_sha384_context>(),
        208usize,
        concat!("Size of: ", stringify!(br_sha384_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_sha384_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_sha384_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha384_context>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha384_context),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha384_context>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha384_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha384_context>())).count as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha384_context),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_sha384_context>())).val as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(br_sha384_context),
            "::",
            stringify!(val)
        )
    );
}
impl Default for br_sha384_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief SHA-384 context initialisation."]
    #[doc = ""]
    #[doc = " This function initialises or resets a context for a new SHA-384"]
    #[doc = " computation. It also sets the vtable pointer."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    pub fn br_sha384_init(ctx: *mut br_sha384_context);
}
extern "C" {
    #[doc = " \\brief Inject some data bytes in a running SHA-384 computation."]
    #[doc = ""]
    #[doc = " The provided context is updated with some data bytes. If the number"]
    #[doc = " of bytes (`len`) is zero, then the data pointer (`data`) is ignored"]
    #[doc = " and may be `NULL`, and this function does nothing."]
    #[doc = ""]
    #[doc = " \\param ctx    pointer to the context structure."]
    #[doc = " \\param data   pointer to the injected data."]
    #[doc = " \\param len    injected data length (in bytes)."]
    pub fn br_sha384_update(ctx: *mut br_sha384_context, data: *const libc::c_void, len: usize);
}
extern "C" {
    #[doc = " \\brief Compute SHA-384 output."]
    #[doc = ""]
    #[doc = " The SHA-384 output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `out`. The context"]
    #[doc = " itself is not modified, so extra bytes may be injected afterwards"]
    #[doc = " to continue that computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the hash output."]
    pub fn br_sha384_out(ctx: *const br_sha384_context, out: *mut libc::c_void);
}
extern "C" {
    #[doc = " \\brief Save SHA-384 running state."]
    #[doc = ""]
    #[doc = " The running state for SHA-384 (output of the last internal block"]
    #[doc = " processing) is written in the buffer pointed to by `out`. The"]
    #[doc = " number of bytes injected since the last initialisation or reset"]
    #[doc = " call is returned. The context is not modified."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the running state."]
    #[doc = " \\return  the injected total byte length."]
    pub fn br_sha384_state(ctx: *const br_sha384_context, out: *mut libc::c_void) -> u64;
}
extern "C" {
    #[doc = " \\brief Restore SHA-384 running state."]
    #[doc = ""]
    #[doc = " The running state for SHA-384 is set to the provided values."]
    #[doc = ""]
    #[doc = " \\param ctx     pointer to the context structure."]
    #[doc = " \\param stb     source buffer for the running state."]
    #[doc = " \\param count   the injected total byte length."]
    pub fn br_sha384_set_state(ctx: *mut br_sha384_context, stb: *const libc::c_void, count: u64);
}
extern "C" {
    pub static br_sha512_vtable: br_hash_class;
}
pub type br_sha512_context = br_sha384_context;
extern "C" {
    #[doc = " \\brief SHA-512 context initialisation."]
    #[doc = ""]
    #[doc = " This function initialises or resets a context for a new SHA-512"]
    #[doc = " computation. It also sets the vtable pointer."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    pub fn br_sha512_init(ctx: *mut br_sha512_context);
}
extern "C" {
    #[doc = " \\brief Compute SHA-512 output."]
    #[doc = ""]
    #[doc = " The SHA-512 output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `out`. The context"]
    #[doc = " itself is not modified, so extra bytes may be injected afterwards"]
    #[doc = " to continue that computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the hash output."]
    pub fn br_sha512_out(ctx: *const br_sha512_context, out: *mut libc::c_void);
}
extern "C" {
    pub static br_md5sha1_vtable: br_hash_class;
}
#[doc = " \\brief MD5+SHA-1 context."]
#[doc = ""]
#[doc = " First field is a pointer to the vtable; it is set by the initialisation"]
#[doc = " function. Other fields are not supposed to be accessed by user code."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_md5sha1_context {
    #[doc = " \\brief Pointer to vtable for this context."]
    pub vtable: *const br_hash_class,
    pub buf: [libc::c_uchar; 64usize],
    pub count: u64,
    pub val_md5: [u32; 4usize],
    pub val_sha1: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_br_md5sha1_context() {
    assert_eq!(
        ::core::mem::size_of::<br_md5sha1_context>(),
        120usize,
        concat!("Size of: ", stringify!(br_md5sha1_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_md5sha1_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_md5sha1_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5sha1_context>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5sha1_context),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5sha1_context>())).buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5sha1_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5sha1_context>())).count as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5sha1_context),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5sha1_context>())).val_md5 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5sha1_context),
            "::",
            stringify!(val_md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_md5sha1_context>())).val_sha1 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(br_md5sha1_context),
            "::",
            stringify!(val_sha1)
        )
    );
}
impl Default for br_md5sha1_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief MD5+SHA-1 context initialisation."]
    #[doc = ""]
    #[doc = " This function initialises or resets a context for a new SHA-512"]
    #[doc = " computation. It also sets the vtable pointer."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    pub fn br_md5sha1_init(ctx: *mut br_md5sha1_context);
}
extern "C" {
    #[doc = " \\brief Inject some data bytes in a running MD5+SHA-1 computation."]
    #[doc = ""]
    #[doc = " The provided context is updated with some data bytes. If the number"]
    #[doc = " of bytes (`len`) is zero, then the data pointer (`data`) is ignored"]
    #[doc = " and may be `NULL`, and this function does nothing."]
    #[doc = ""]
    #[doc = " \\param ctx    pointer to the context structure."]
    #[doc = " \\param data   pointer to the injected data."]
    #[doc = " \\param len    injected data length (in bytes)."]
    pub fn br_md5sha1_update(ctx: *mut br_md5sha1_context, data: *const libc::c_void, len: usize);
}
extern "C" {
    #[doc = " \\brief Compute MD5+SHA-1 output."]
    #[doc = ""]
    #[doc = " The MD5+SHA-1 output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `out`. The context"]
    #[doc = " itself is not modified, so extra bytes may be injected afterwards"]
    #[doc = " to continue that computation."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the hash output."]
    pub fn br_md5sha1_out(ctx: *const br_md5sha1_context, out: *mut libc::c_void);
}
extern "C" {
    #[doc = " \\brief Save MD5+SHA-1 running state."]
    #[doc = ""]
    #[doc = " The running state for MD5+SHA-1 (output of the last internal block"]
    #[doc = " processing) is written in the buffer pointed to by `out`. The"]
    #[doc = " number of bytes injected since the last initialisation or reset"]
    #[doc = " call is returned. The context is not modified."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param out   destination buffer for the running state."]
    #[doc = " \\return  the injected total byte length."]
    pub fn br_md5sha1_state(ctx: *const br_md5sha1_context, out: *mut libc::c_void) -> u64;
}
extern "C" {
    #[doc = " \\brief Restore MD5+SHA-1 running state."]
    #[doc = ""]
    #[doc = " The running state for MD5+SHA-1 is set to the provided values."]
    #[doc = ""]
    #[doc = " \\param ctx     pointer to the context structure."]
    #[doc = " \\param stb     source buffer for the running state."]
    #[doc = " \\param count   the injected total byte length."]
    pub fn br_md5sha1_set_state(ctx: *mut br_md5sha1_context, stb: *const libc::c_void, count: u64);
}
#[doc = " \\brief Aggregate context for configurable hash function support."]
#[doc = ""]
#[doc = " The `br_hash_compat_context` type is a type which is large enough to"]
#[doc = " serve as context for all standard hash functions defined above."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union br_hash_compat_context {
    pub vtable: *const br_hash_class,
    pub md5: br_md5_context,
    pub sha1: br_sha1_context,
    pub sha224: br_sha224_context,
    pub sha256: br_sha256_context,
    pub sha384: br_sha384_context,
    pub sha512: br_sha512_context,
    pub md5sha1: br_md5sha1_context,
    _bindgen_union_align: [u64; 26usize],
}
#[test]
fn bindgen_test_layout_br_hash_compat_context() {
    assert_eq!(
        ::core::mem::size_of::<br_hash_compat_context>(),
        208usize,
        concat!("Size of: ", stringify!(br_hash_compat_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_hash_compat_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_hash_compat_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).md5 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).sha1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(sha1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).sha224 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(sha224)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).sha256 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(sha256)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).sha384 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(sha384)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).sha512 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(sha512)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hash_compat_context>())).md5sha1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hash_compat_context),
            "::",
            stringify!(md5sha1)
        )
    );
}
impl Default for br_hash_compat_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[doc = " \\brief Multi-hasher context structure."]
#[doc = ""]
#[doc = " The multi-hasher runs up to six hash functions in the standard TLS list"]
#[doc = " (MD5, SHA-1, SHA-224, SHA-256, SHA-384 and SHA-512) in parallel, over"]
#[doc = " the same input."]
#[doc = ""]
#[doc = " The multi-hasher does _not_ follow the OOP structure with a vtable."]
#[doc = " Instead, it is configured with the vtables of the hash functions it"]
#[doc = " should run. Structure fields are not supposed to be accessed directly."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_multihash_context {
    pub buf: [libc::c_uchar; 128usize],
    pub count: u64,
    pub val_32: [u32; 25usize],
    pub val_64: [u64; 16usize],
    pub impl_: [*const br_hash_class; 6usize],
}
#[test]
fn bindgen_test_layout_br_multihash_context() {
    assert_eq!(
        ::core::mem::size_of::<br_multihash_context>(),
        416usize,
        concat!("Size of: ", stringify!(br_multihash_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_multihash_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_multihash_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_multihash_context>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_multihash_context),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_multihash_context>())).count as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(br_multihash_context),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_multihash_context>())).val_32 as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(br_multihash_context),
            "::",
            stringify!(val_32)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_multihash_context>())).val_64 as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(br_multihash_context),
            "::",
            stringify!(val_64)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_multihash_context>())).impl_ as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(br_multihash_context),
            "::",
            stringify!(impl_)
        )
    );
}
impl Default for br_multihash_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief Clear a multi-hasher context."]
    #[doc = ""]
    #[doc = " This should always be called once on a given context, _before_ setting"]
    #[doc = " the implementation pointers."]
    #[doc = ""]
    #[doc = " \\param ctx   the multi-hasher context."]
    pub fn br_multihash_zero(ctx: *mut br_multihash_context);
}
extern "C" {
    #[doc = " \\brief Reset a multi-hasher context."]
    #[doc = ""]
    #[doc = " This function prepares the context for a new hashing computation,"]
    #[doc = " for all implementations configured at that point."]
    #[doc = ""]
    #[doc = " \\param ctx    the multi-hasher context."]
    pub fn br_multihash_init(ctx: *mut br_multihash_context);
}
extern "C" {
    #[doc = " \\brief Inject some data bytes in a running multi-hashing computation."]
    #[doc = ""]
    #[doc = " The provided context is updated with some data bytes. If the number"]
    #[doc = " of bytes (`len`) is zero, then the data pointer (`data`) is ignored"]
    #[doc = " and may be `NULL`, and this function does nothing."]
    #[doc = ""]
    #[doc = " \\param ctx    pointer to the context structure."]
    #[doc = " \\param data   pointer to the injected data."]
    #[doc = " \\param len    injected data length (in bytes)."]
    pub fn br_multihash_update(
        ctx: *mut br_multihash_context,
        data: *const libc::c_void,
        len: usize,
    );
}
extern "C" {
    #[doc = " \\brief Compute a hash output from a multi-hasher."]
    #[doc = ""]
    #[doc = " The hash output for the concatenation of all bytes injected in the"]
    #[doc = " provided context since the last initialisation or reset call, is"]
    #[doc = " computed and written in the buffer pointed to by `dst`. The hash"]
    #[doc = " function to use is identified by `id` and must be one of the standard"]
    #[doc = " hash functions. If that hash function was indeed configured in the"]
    #[doc = " multi-hasher context, the corresponding hash value is written in"]
    #[doc = " `dst` and its length (in bytes) is returned. If the hash function"]
    #[doc = " was _not_ configured, then nothing is written in `dst` and 0 is"]
    #[doc = " returned."]
    #[doc = ""]
    #[doc = " The context itself is not modified, so extra bytes may be injected"]
    #[doc = " afterwards to continue the hash computations."]
    #[doc = ""]
    #[doc = " \\param ctx   pointer to the context structure."]
    #[doc = " \\param id    the hash function symbolic identifier."]
    #[doc = " \\param dst   destination buffer for the hash output."]
    #[doc = " \\return  the hash output length (in bytes), or 0."]
    pub fn br_multihash_out(
        ctx: *const br_multihash_context,
        id: libc::c_int,
        dst: *mut libc::c_void,
    ) -> usize;
}
#[doc = " \\brief Type for a GHASH implementation."]
#[doc = ""]
#[doc = " GHASH is a sort of keyed hash meant to be used to implement GCM in"]
#[doc = " combination with a block cipher (with 16-byte blocks)."]
#[doc = ""]
#[doc = " The `y` array has length 16 bytes and is used for input and output; in"]
#[doc = " a complete GHASH run, it starts with an all-zero value. `h` is a 16-byte"]
#[doc = " value that serves as key (it is derived from the encryption key in GCM,"]
#[doc = " using the block cipher). The data length (`len`) is expressed in bytes."]
#[doc = " The `y` array is updated."]
#[doc = ""]
#[doc = " If the data length is not a multiple of 16, then the data is implicitly"]
#[doc = " padded with zeros up to the next multiple of 16. Thus, when using GHASH"]
#[doc = " in GCM, this method may be called twice, for the associated data and"]
#[doc = " for the ciphertext, respectively; the zero-padding implements exactly"]
#[doc = " the GCM rules."]
#[doc = ""]
#[doc = " \\param y      the array to update."]
#[doc = " \\param h      the GHASH key."]
#[doc = " \\param data   the input data (may be `NULL` if `len` is zero)."]
#[doc = " \\param len    the input data length (in bytes)."]
pub type br_ghash = ::core::option::Option<
    unsafe extern "C" fn(
        y: *mut libc::c_void,
        h: *const libc::c_void,
        data: *const libc::c_void,
        len: usize,
    ),
>;
extern "C" {
    #[doc = " \\brief GHASH implementation using multiplications (mixed 32-bit)."]
    #[doc = ""]
    #[doc = " This implementation uses multiplications of 32-bit values, with a"]
    #[doc = " 64-bit result. It is constant-time (if multiplications are"]
    #[doc = " constant-time)."]
    #[doc = ""]
    #[doc = " \\param y      the array to update."]
    #[doc = " \\param h      the GHASH key."]
    #[doc = " \\param data   the input data (may be `NULL` if `len` is zero)."]
    #[doc = " \\param len    the input data length (in bytes)."]
    pub fn br_ghash_ctmul(
        y: *mut libc::c_void,
        h: *const libc::c_void,
        data: *const libc::c_void,
        len: usize,
    );
}
extern "C" {
    #[doc = " \\brief GHASH implementation using multiplications (strict 32-bit)."]
    #[doc = ""]
    #[doc = " This implementation uses multiplications of 32-bit values, with a"]
    #[doc = " 32-bit result. It is usually somewhat slower than `br_ghash_ctmul()`,"]
    #[doc = " but it is expected to be faster on architectures for which the"]
    #[doc = " 32-bit multiplication opcode does not yield the upper 32 bits of the"]
    #[doc = " product. It is constant-time (if multiplications are constant-time)."]
    #[doc = ""]
    #[doc = " \\param y      the array to update."]
    #[doc = " \\param h      the GHASH key."]
    #[doc = " \\param data   the input data (may be `NULL` if `len` is zero)."]
    #[doc = " \\param len    the input data length (in bytes)."]
    pub fn br_ghash_ctmul32(
        y: *mut libc::c_void,
        h: *const libc::c_void,
        data: *const libc::c_void,
        len: usize,
    );
}
extern "C" {
    #[doc = " \\brief GHASH implementation using multiplications (64-bit)."]
    #[doc = ""]
    #[doc = " This implementation uses multiplications of 64-bit values, with a"]
    #[doc = " 64-bit result. It is constant-time (if multiplications are"]
    #[doc = " constant-time). It is substantially faster than `br_ghash_ctmul()`"]
    #[doc = " and `br_ghash_ctmul32()` on most 64-bit architectures."]
    #[doc = ""]
    #[doc = " \\param y      the array to update."]
    #[doc = " \\param h      the GHASH key."]
    #[doc = " \\param data   the input data (may be `NULL` if `len` is zero)."]
    #[doc = " \\param len    the input data length (in bytes)."]
    pub fn br_ghash_ctmul64(
        y: *mut libc::c_void,
        h: *const libc::c_void,
        data: *const libc::c_void,
        len: usize,
    );
}
extern "C" {
    #[doc = " \\brief GHASH implementation using the `pclmulqdq` opcode (part of the"]
    #[doc = " AES-NI instructions)."]
    #[doc = ""]
    #[doc = " This implementation is available only on x86 platforms where the"]
    #[doc = " compiler supports the relevant intrinsic functions. Even if the"]
    #[doc = " compiler supports these functions, the local CPU might not support"]
    #[doc = " the `pclmulqdq` opcode, meaning that a call will fail with an"]
    #[doc = " illegal instruction exception. To safely obtain a pointer to this"]
    #[doc = " function when supported (or 0 otherwise), use `br_ghash_pclmul_get()`."]
    #[doc = ""]
    #[doc = " \\param y      the array to update."]
    #[doc = " \\param h      the GHASH key."]
    #[doc = " \\param data   the input data (may be `NULL` if `len` is zero)."]
    #[doc = " \\param len    the input data length (in bytes)."]
    pub fn br_ghash_pclmul(
        y: *mut libc::c_void,
        h: *const libc::c_void,
        data: *const libc::c_void,
        len: usize,
    );
}
extern "C" {
    #[doc = " \\brief Obtain the `pclmul` GHASH implementation, if available."]
    #[doc = ""]
    #[doc = " If the `pclmul` implementation was compiled in the library (depending"]
    #[doc = " on the compiler abilities) _and_ the local CPU appears to support the"]
    #[doc = " opcode, then this function will return a pointer to the"]
    #[doc = " `br_ghash_pclmul()` function. Otherwise, it will return `0`."]
    #[doc = ""]
    #[doc = " \\return  the `pclmul` GHASH implementation, or `0`."]
    pub fn br_ghash_pclmul_get() -> br_ghash;
}
extern "C" {
    #[doc = " \\brief GHASH implementation using the POWER8 opcodes."]
    #[doc = ""]
    #[doc = " This implementation is available only on POWER8 platforms (and later)."]
    #[doc = " To safely obtain a pointer to this function when supported (or 0"]
    #[doc = " otherwise), use `br_ghash_pwr8_get()`."]
    #[doc = ""]
    #[doc = " \\param y      the array to update."]
    #[doc = " \\param h      the GHASH key."]
    #[doc = " \\param data   the input data (may be `NULL` if `len` is zero)."]
    #[doc = " \\param len    the input data length (in bytes)."]
    pub fn br_ghash_pwr8(
        y: *mut libc::c_void,
        h: *const libc::c_void,
        data: *const libc::c_void,
        len: usize,
    );
}
extern "C" {
    #[doc = " \\brief Obtain the `pwr8` GHASH implementation, if available."]
    #[doc = ""]
    #[doc = " If the `pwr8` implementation was compiled in the library (depending"]
    #[doc = " on the compiler abilities) _and_ the local CPU appears to support the"]
    #[doc = " opcode, then this function will return a pointer to the"]
    #[doc = " `br_ghash_pwr8()` function. Otherwise, it will return `0`."]
    #[doc = ""]
    #[doc = " \\return  the `pwr8` GHASH implementation, or `0`."]
    pub fn br_ghash_pwr8_get() -> br_ghash;
}
#[doc = " \\brief HMAC key context."]
#[doc = ""]
#[doc = " The HMAC key context is initialised with a hash function implementation"]
#[doc = " and a secret key. Contents are opaque (callers should not access them"]
#[doc = " directly). The caller is responsible for allocating the context where"]
#[doc = " appropriate. Context initialisation and usage incurs no dynamic"]
#[doc = " allocation, so there is no release function."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_hmac_key_context {
    pub dig_vtable: *const br_hash_class,
    pub ksi: [libc::c_uchar; 64usize],
    pub kso: [libc::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_br_hmac_key_context() {
    assert_eq!(
        ::core::mem::size_of::<br_hmac_key_context>(),
        136usize,
        concat!("Size of: ", stringify!(br_hmac_key_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_hmac_key_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_hmac_key_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hmac_key_context>())).dig_vtable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hmac_key_context),
            "::",
            stringify!(dig_vtable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hmac_key_context>())).ksi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hmac_key_context),
            "::",
            stringify!(ksi)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hmac_key_context>())).kso as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hmac_key_context),
            "::",
            stringify!(kso)
        )
    );
}
impl Default for br_hmac_key_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief HMAC key context initialisation."]
    #[doc = ""]
    #[doc = " Initialise the key context with the provided key, using the hash function"]
    #[doc = " identified by `digest_vtable`. This supports arbitrary key lengths."]
    #[doc = ""]
    #[doc = " \\param kc              HMAC key context to initialise."]
    #[doc = " \\param digest_vtable   pointer to the hash function implementation vtable."]
    #[doc = " \\param key             pointer to the HMAC secret key."]
    #[doc = " \\param key_len         HMAC secret key length (in bytes)."]
    pub fn br_hmac_key_init(
        kc: *mut br_hmac_key_context,
        digest_vtable: *const br_hash_class,
        key: *const libc::c_void,
        key_len: usize,
    );
}
#[doc = " \\brief HMAC computation context."]
#[doc = ""]
#[doc = " The HMAC computation context maintains the state for a single HMAC"]
#[doc = " computation. It is modified as input bytes are injected. The context"]
#[doc = " is caller-allocated and has no release function since it does not"]
#[doc = " dynamically allocate external resources. Its contents are opaque."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct br_hmac_context {
    pub dig: br_hash_compat_context,
    pub kso: [libc::c_uchar; 64usize],
    pub out_len: usize,
}
#[test]
fn bindgen_test_layout_br_hmac_context() {
    assert_eq!(
        ::core::mem::size_of::<br_hmac_context>(),
        280usize,
        concat!("Size of: ", stringify!(br_hmac_context))
    );
    assert_eq!(
        ::core::mem::align_of::<br_hmac_context>(),
        8usize,
        concat!("Alignment of ", stringify!(br_hmac_context))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hmac_context>())).dig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hmac_context),
            "::",
            stringify!(dig)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hmac_context>())).kso as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hmac_context),
            "::",
            stringify!(kso)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<br_hmac_context>())).out_len as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(br_hmac_context),
            "::",
            stringify!(out_len)
        )
    );
}
impl Default for br_hmac_context {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
extern "C" {
    #[doc = " \\brief HMAC computation initialisation."]
    #[doc = ""]
    #[doc = " Initialise a HMAC context with a key context. The key context is"]
    #[doc = " unmodified. Relevant data from the key context is immediately copied;"]
    #[doc = " the key context can thus be independently reused, modified or released"]
    #[doc = " without impacting this HMAC computation."]
    #[doc = ""]
    #[doc = " An explicit output length can be specified; the actual output length"]
    #[doc = " will be the minimum of that value and the natural HMAC output length."]
    #[doc = " If `out_len` is 0, then the natural HMAC output length is selected. The"]
    #[doc = " \"natural output length\" is the output length of the underlying hash"]
    #[doc = " function."]
    #[doc = ""]
    #[doc = " \\param ctx       HMAC context to initialise."]
    #[doc = " \\param kc        HMAC key context (already initialised with the key)."]
    #[doc = " \\param out_len   HMAC output length (0 to select \"natural length\")."]
    pub fn br_hmac_init(ctx: *mut br_hmac_context, kc: *const br_hmac_key_context, out_len: usize);
}
extern "C" {
    #[doc = " \\brief Inject some bytes in HMAC."]
    #[doc = ""]
    #[doc = " The provided `len` bytes are injected as extra input in the HMAC"]
    #[doc = " computation incarnated by the `ctx` HMAC context. It is acceptable"]
    #[doc = " that `len` is zero, in which case `data` is ignored (and may be"]
    #[doc = " `NULL`) and this function does nothing."]
    pub fn br_hmac_update(ctx: *mut br_hmac_context, data: *const libc::c_void, len: usize);
}
extern "C" {
    #[doc = " \\brief Compute the HMAC output."]
    #[doc = ""]
    #[doc = " The destination buffer MUST be large enough to accommodate the result;"]
    #[doc = " its length is at most the \"natural length\" of HMAC (i.e. the output"]
    #[doc = " length of the underlying hash function). The context is NOT modified;"]
    #[doc = " further bytes may be processed. Thus, \"partial HMAC\" values can be"]
    #[doc = " efficiently obtained."]
    #[doc = ""]
    #[doc = " Returned value is the output length (in bytes)."]
    #[doc = ""]
    #[doc = " \\param ctx   HMAC computation context."]
    #[doc = " \\param out   destination buffer for the HMAC output."]
    #[doc = " \\return  the produced value length (in bytes)."]
    pub fn br_hmac_out(ctx: *const br_hmac_context, out: *mut libc::c_void) -> usize;
}
extern "C" {
    #[doc = " \\brief Constant-time HMAC computation."]
    #[doc = ""]
    #[doc = " This function compute the HMAC output in constant time. Some extra"]
    #[doc = " input bytes are processed, then the output is computed. The extra"]
    #[doc = " input consists in the `len` bytes pointed to by `data`. The `len`"]
    #[doc = " parameter must lie between `min_len` and `max_len` (inclusive);"]
    #[doc = " `max_len` bytes are actually read from `data`. Computing time (and"]
    #[doc = " memory access pattern) will not depend upon the data byte contents or"]
    #[doc = " the value of `len`."]
    #[doc = ""]
    #[doc = " The output is written in the `out` buffer, that MUST be large enough"]
    #[doc = " to receive it."]
    #[doc = ""]
    #[doc = " The difference `max_len - min_len` MUST be less than 2<sup>30</sup>"]
    #[doc = " (i.e. about one gigabyte)."]
    #[doc = ""]
    #[doc = " This function computes the output properly only if the underlying"]
    #[doc = " hash function uses MD padding (i.e. MD5, SHA-1, SHA-224, SHA-256,"]
    #[doc = " SHA-384 or SHA-512)."]
    #[doc = ""]
    #[doc = " The provided context is NOT modified."]
    #[doc = ""]
    #[doc = " \\param ctx       the (already initialised) HMAC computation context."]
    #[doc = " \\param data      the extra input bytes."]
    #[doc = " \\param len       the extra input length (in bytes)."]
    #[doc = " \\param min_len   minimum extra input length (in bytes)."]
    #[doc = " \\param max_len   maximum extra input length (in bytes)."]
    #[doc = " \\param out       destination buffer for the HMAC output."]
    #[doc = " \\return  the produced value length (in bytes)."]
    pub fn br_hmac_outCT(
        ctx: *const br_hmac_context,
        data: *const libc::c_void,
        len: usize,
        min_len: usize,
        max_len: usize,
        out: *mut libc::c_void,
    ) -> usize;
}
extern "C" {
    pub fn curve25519_donna(
        arg1: *mut libc::c_uchar,
        arg2: *const libc::c_uchar,
        arg3: *const libc::c_uchar,
    ) -> libc::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
